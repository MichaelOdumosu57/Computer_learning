https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04

SETTING UP NGINX SERVER BLOCKS
Nginx web server,
server blocks (similar to the virtual hosts in Apache)can be used to encapsulate configuration details and host more than one domain off of a single server

use example.com and test.com

ngnix has one server block enabled by default
/var/www/html

make a directory structure for each site and make an html folder for any related files
the -p flag tells it to make any required directories along the way
    sudo mkdir -p /var/www/example.com/html
    

note:Depending on your needs, you might need to adjust the permissions or ownership of the folders again to allow certain access to the www-data user. For instance, dynamic sites will often need this. The specific permissions and ownership requirements entirely depend on what your configuration. Follow the recommendations for the specific technology you're using.

We can use the $USER environmental variable to assign ownership to the account that we are currently signed in on. This will allow us to easily create or edit the content in this directory: (not as root)
        sudo chown -R $USER:$USER /var/www/example.com/html

next make a sample page for your site
    vim /var/www/example.com/html/index.html

we need to actually create the server blocks that will tell Nginx how to do this.
By default, Nginx contains one server block called default which we can use as a template for our own configurations. We will begin by designing our first domain's server block
    copy over the default file
        sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/example.com
    sudo vim /etc/nginx/sites-available/example.com
remove default server from
            listen 80;
        listen [::]:80;
the server blocks

------------------------------------------------------------------------------------------------------------
note You can check that the default_server option is only enabled in a single active file by typing:

grep -R default_server /etc/nginx/sites-enabled/
If matches are found uncommented in more than on file (shown in the leftmost column), Nginx will complain about an invalid configuration.

----------------------------------------------------------------------------------------------------------


The next thing we're going to have to adjust is the document root, specified by the root directive. Point it to the site's document root that you created:

change from
    root /var/www/html;
to
    root /var/www/example.com/html;

Next, we need to modify the server_name to match requests for our first domain. We can additionally add any aliases that we want to match. We will add a www.example.com alias to demonstrate.

finished
        
        
        server {
                listen 80;
                listen [::]:80;
        
                root /var/www/example.com/html;
                index index.html index.htm index.nginx-debian.html;
        
                server_name example.com www.example.com;
        
                location / {
                        try_files $uri $uri/ =404;
                }
        }

Now that we have our server block files, we need to enable them. We can do this by creating symbolic links from these files to the sites-enabled directory, which Nginx reads from during startup.

    sudo ln -s /etc/nginx/sites-available/example.com /etc/nginx/sites-enabled/

These files are now in the enabled directory. We now have three server blocks enabled, which are configured to respond based on their listen directive and the server_name

example.com: Will respond to requests for example.com and www.example.com
default: Will respond to any requests on port 80 that do not match the other two blocks.

In order to avoid a possible hash bucket memory problem that can arise from adding additional server names, we will go ahead and adjust a single value within our /etc/nginx/nginx.conf file. Open the file now:

    sudo vim /etc/nginx/nginx.conf

server_names_hash_bucket_size remove the #

Next, test to make sure that there are no syntax errors in any of your Nginx files:
    
    sudo nginx -t

no problems restart using

    sudo systemctl restart nginx

Step Five: Modify Your Local Hosts File for Testing(Optional)
If you have not been using domain names that you own and instead have been using dummy values, you can modify your local computer's configuration to let you to temporarily test your Nginx server block configuration.

This will not allow other visitors to view your site correctly, but it will give you the ability to reach each site independently and test your configuration. This basically works by intercepting requests that would usually go to DNS to resolve domain names. Instead, we can set the IP addresses we want our local computer to go to when we request the domain names.


Make sure you are operating on your local computer

alter your host file by typing
    local $ sudo nano /etc/hosts
error says local can only be used in a function
    sudo vim /etc/hosts

    This will intercept any requests for example.com and send to your server
    added --192.168.1.4 www.example.com example.com

go to http://example.com wait a minute and the page should show up!, remove that from /etc/hosts we don't want that there
    